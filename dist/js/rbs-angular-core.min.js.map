{"version":3,"sources":["/source/main.litcoffee","rbs-angular-core.js","/source/service/Resolves.litcoffee","/source/service/ErrorFactory.litcoffee","/source/service/Backoff.litcoffee","/source/controller/ActionProgressSupport.litcoffee","/source/controller/ActionMessagesSupport.litcoffee","/source/controller/ActionCtrl.litcoffee","/source/config/Configuration.litcoffee"],"names":["angular","module","call","this","Resolves","slice","andThen","delegateIndex","dep","dependencyNames","fn1","fn1Deps","fn2","fn2Deps","i","j","k","l","len","len1","mapping","next","resolves","arguments","length","indexOf","splice","push","$q","dependencies","error","error1","newFn1Deps","when","apply","then","$delegate","newFn2Deps","reject","concat","constant","ApplicationError","ErrorFactory","extend","child","parent","ctor","constructor","key","hasProp","prototype","__super__","hasOwnProperty","superClass","status1","code1","message1","status","code","message","Error","create","service","$log","$timeout","Backoff","name","minBackoff","maxBackoff","randomFactor","task","debug","$restartCount","cancel","ref","isFunction","$promise","execute","args","$execute","_this","result","$onSuccess","$onFailure","rnd","Math","random","$currentBackoff","min","pow","lastOutcome","func","Object","config","ConfigurationProvider","add","run","$rootScope","$websocket","Configuration","bo","max","onMessage","event","JSON","parse","data","$broadcast","WS_MIN_BACKOFF","WS_WS_MAX_BACKOFF","deferred","ws","defer","WS_WS_URL","onClose","promise","ActionProgressSupport","startProgress","progress","stopProgress","ActionMessagesSupport","resetMessages","messages","addMessage","type","addError","addSuccess","success","addInfo","info","addWarning","warning","removeMessage","index","ActionCtrl","modelName","actionName","performValid","arg","form","$valid","perform","onInvalid","$toPromise","fn","onCompleteFailure","onCompleteSuccess","onFailure","onSuccess","postProcess","preProcess","workflow","onComplete","outcome","PARAMETERS","$get","get","value","entry","put","merge","set","provider"],"mappings":"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","file":"rbs-angular-core.min.js","sourcesContent":["Główny moduł:\n\n    angular.module 'rbs-angular-core', []\n\nModuł zawierający przykłady wykorzystywane w dokumentacji:\n\n    angular.module 'rbs-angular-core-samples', ['rbs-angular-core']\n","(function() {\n  angular.module('rbs-angular-core', []);\n\n  angular.module('rbs-angular-core-samples', ['rbs-angular-core']);\n\n}).call(this);\n\n(function() {\n  var Resolves,\n    slice = [].slice;\n\n  Resolves = (function() {\n    function Resolves() {}\n\n    Resolves.andThen = function() {\n      var delegateIndex, dep, dependencyNames, fn1, fn1Deps, fn2, fn2Deps, i, j, k, l, len, len1, mapping, next, resolves;\n      resolves = arguments[0], mapping = arguments[1], next = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n      dependencyNames = ['$q'];\n      fn1 = void 0;\n      fn2 = void 0;\n      fn1Deps = 2 <= resolves.length ? slice.call(resolves, 0, i = resolves.length - 1) : (i = 0, []), fn1 = resolves[i++];\n      fn2Deps = 2 <= mapping.length ? slice.call(mapping, 0, j = mapping.length - 1) : (j = 0, []), fn2 = mapping[j++];\n      delegateIndex = fn2Deps.indexOf('$delegate');\n      if (delegateIndex >= 0) {\n        fn2Deps.splice(delegateIndex, 1);\n      }\n      for (k = 0, len = fn1Deps.length; k < len; k++) {\n        dep = fn1Deps[k];\n        dependencyNames.push(dep);\n      }\n      for (l = 0, len1 = fn2Deps.length; l < len1; l++) {\n        dep = fn2Deps[l];\n        dependencyNames.push(dep);\n      }\n      dependencyNames.push(function() {\n        var $q, dependencies, error, error1, newFn1Deps;\n        $q = arguments[0], dependencies = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n        try {\n          newFn1Deps = dependencies.slice(0, fn1Deps.length);\n          return $q.when(fn1.apply(null, newFn1Deps)).then(function($delegate) {\n            var newFn2Deps;\n            newFn2Deps = dependencies.slice(fn1Deps.length, fn1Deps.length + fn2Deps.length);\n            if (delegateIndex >= 0) {\n              newFn2Deps.splice(delegateIndex, 0, $delegate);\n            }\n            return fn2.apply(null, newFn2Deps);\n          });\n        } catch (error1) {\n          error = error1;\n          return $q.reject(error);\n        }\n      });\n      dependencyNames;\n      if (next.length > 0) {\n        return Resolves.andThen.apply(Resolves, [dependencyNames].concat(slice.call(next)));\n      } else {\n        return dependencyNames;\n      }\n    };\n\n    return Resolves;\n\n  })();\n\n  (angular.module('rbs-angular-core')).constant('Resolves', Resolves);\n\n}).call(this);\n\n(function() {\n  var ApplicationError, ErrorFactory,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  ApplicationError = (function(superClass) {\n    extend(ApplicationError, superClass);\n\n    function ApplicationError(status1, code1, message1) {\n      this.status = status1;\n      this.code = code1;\n      this.message = message1;\n    }\n\n    return ApplicationError;\n\n  })(Error);\n\n  ErrorFactory = (function() {\n    function ErrorFactory() {}\n\n    ErrorFactory.create = function(status, code, message) {\n      return new ApplicationError(status, code, message);\n    };\n\n    ErrorFactory[\"throw\"] = function(status, code, message) {\n      throw ErrorFactory.create(status, code, message);\n    };\n\n    return ErrorFactory;\n\n  })();\n\n  (angular.module('rbs-angular-core')).constant('ErrorFactory', ErrorFactory);\n\n}).call(this);\n\n(function() {\n  var slice = [].slice;\n\n  (angular.module('rbs-angular-core')).service('Backoff', [\n    '$log', '$q', '$timeout', function($log, $q, $timeout) {\n      var Backoff;\n      Backoff = (function() {\n        function Backoff(name, minBackoff, maxBackoff, randomFactor, task) {\n          this.name = name;\n          this.minBackoff = minBackoff;\n          this.maxBackoff = maxBackoff;\n          this.randomFactor = randomFactor;\n          this.task = task;\n          $log.debug(\"Creating \" + this.name + \":\", \"minBackoff\", this.minBackoff, \"maxBackoff\", this.maxBackoff, \"randomFactor\", this.randomFactor);\n          this.$restartCount = 0;\n        }\n\n        Backoff.prototype.cancel = function() {\n          var ref;\n          $log.debug(this.name + \" cancelled.\");\n          if (angular.isFunction((ref = this.$promise) != null ? ref.then : void 0)) {\n            $timeout.cancel(this.$promise);\n          }\n          return this.$promise = void 0;\n        };\n\n        Backoff.prototype.execute = function() {\n          var args;\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          $log.debug(this.name + \" executing..\");\n          return this.$execute.apply(this, args).then(((function(_this) {\n            return function(result) {\n              return _this.$onSuccess.apply(_this, [result].concat(slice.call(args)));\n            };\n          })(this)), (function(_this) {\n            return function(error) {\n              return _this.$onFailure.apply(_this, [error].concat(slice.call(args)));\n            };\n          })(this));\n        };\n\n        Backoff.prototype.$onSuccess = function() {\n          var args, result;\n          result = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n          $log.debug(this.name + \" success.\");\n          this.$restartCount = 0;\n          return result;\n        };\n\n        Backoff.prototype.$onFailure = function() {\n          var args, error, rnd;\n          error = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n          rnd = 1 + Math.random() * this.randomFactor;\n          this.$currentBackoff = Math.min(this.maxBackoff, this.minBackoff * Math.pow(2, this.$restartCount) * rnd);\n          this.$restartCount += 1;\n          $log.error(this.name + \" failure! Retry in \" + this.$currentBackoff + \"..\");\n          this.$promise = $timeout(((function(_this) {\n            return function() {\n              return _this.execute.apply(_this, args);\n            };\n          })(this)), this.$currentBackoff, true);\n          return this.$promise;\n        };\n\n        Backoff.prototype.$execute = function() {\n          var args, error;\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return this.lastOutcome = (function() {\n            var error1;\n            try {\n              return $q.when(this.task.apply(this, args));\n            } catch (error1) {\n              error = error1;\n              $log.error(error);\n              return $q.reject(error);\n            }\n          }).call(this);\n        };\n\n        return Backoff;\n\n      })();\n      return function() {\n        var args;\n        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        return (function(func, args, ctor) {\n          ctor.prototype = func.prototype;\n          var child = new ctor, result = func.apply(child, args);\n          return Object(result) === result ? result : child;\n        })(Backoff, args, function(){});\n      };\n    }\n  ]);\n\n  (angular.module('rbs-angular-core-samples')).config([\n    'ConfigurationProvider', function(ConfigurationProvider) {\n      ConfigurationProvider.add('WS_URL', 'ws://example.org/events');\n      ConfigurationProvider.add('WS_MIN_BACKOFF', 10 * 1000);\n      return ConfigurationProvider.add('WS_MAX_BACKOFF', 120 * 1000);\n    }\n  ]);\n\n  (angular.module('rbs-angular-core-samples')).run([\n    '$log', '$q', '$rootScope', '$websocket', 'Backoff', 'Configuration', function($log, $q, $rootScope, $websocket, Backoff, Configuration) {\n      var bo, max, min, onMessage, random;\n      onMessage = function(event) {\n        var message;\n        message = JSON.parse(event.data);\n        return $rootScope.$broadcast('ws-event', message);\n      };\n      min = Configuration.WS_MIN_BACKOFF;\n      max = Configuration.WS_WS_MAX_BACKOFF;\n      random = 0.2;\n      bo = Backoff(\"Event stream WS\", min, max, random, function() {\n        var deferred, ws;\n        deferred = $q.defer();\n        ws = $websocket(WS_WS_URL + \"/event?\");\n        ws.onMessage(onMessage);\n        ws.onClose(function(event) {\n          return deferred.reject(event);\n        });\n        return deferred.promise;\n      });\n      return bo.execute();\n    }\n  ]);\n\n}).call(this);\n\n(function() {\n  (angular.module('rbs-angular-core')).service('ActionProgressSupport', [\n    '$log', '$q', function($log, $q) {\n      var ActionProgressSupport;\n      ActionProgressSupport = (function() {\n        function ActionProgressSupport() {}\n\n        ActionProgressSupport.prototype.startProgress = function() {\n          return this.progress = true;\n        };\n\n        ActionProgressSupport.prototype.stopProgress = function() {\n          return this.progress = false;\n        };\n\n        return ActionProgressSupport;\n\n      })();\n      return ActionProgressSupport;\n    }\n  ]);\n\n}).call(this);\n\n(function() {\n  (angular.module('rbs-angular-core')).service('ActionMessagesSupport', [\n    '$log', '$q', function($log, $q) {\n      var ActionMessagesSupport;\n      ActionMessagesSupport = (function() {\n        function ActionMessagesSupport() {}\n\n        ActionMessagesSupport.prototype.resetMessages = function() {\n          return this.messages = [];\n        };\n\n        ActionMessagesSupport.prototype.addMessage = function(type, message) {\n          return (this.messages || this.resetMessages()).push({\n            type: type,\n            message: message\n          });\n        };\n\n        ActionMessagesSupport.prototype.addError = function(error) {\n          return this.addMessage('danger', error);\n        };\n\n        ActionMessagesSupport.prototype.addSuccess = function(success) {\n          return this.addMessage('success', success);\n        };\n\n        ActionMessagesSupport.prototype.addInfo = function(info) {\n          return this.addMessage('info', info);\n        };\n\n        ActionMessagesSupport.prototype.addWarning = function(warning) {\n          return this.addMessage('warning', warning);\n        };\n\n        ActionMessagesSupport.prototype.removeMessage = function(index) {\n          return this.messages.splice(index, 1);\n        };\n\n        return ActionMessagesSupport;\n\n      })();\n      return ActionMessagesSupport;\n    }\n  ]);\n\n}).call(this);\n\n(function() {\n  var slice = [].slice;\n\n  (angular.module('rbs-angular-core')).service('ActionCtrl', [\n    '$log', '$q', function($log, $q) {\n      var ActionCtrl;\n      ActionCtrl = (function() {\n        function ActionCtrl(modelName, actionName) {\n          this.modelName = modelName;\n          this.actionName = actionName;\n        }\n\n        ActionCtrl.prototype.performValid = function() {\n          var arg, args, form;\n          form = arguments[0], arg = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n          if (form.$valid) {\n            return this.perform.apply(this, [arg].concat(slice.call(args)));\n          } else {\n            return this.onInvalid.apply(this, [form, arg].concat(slice.call(args)));\n          }\n        };\n\n        ActionCtrl.prototype.$toPromise = function(fn) {\n          var error, error1;\n          try {\n            return $q.when(fn());\n          } catch (error1) {\n            error = error1;\n            return $q.reject(error);\n          }\n        };\n\n        ActionCtrl.prototype.perform = function() {\n          var arg, args, execute, onCompleteFailure, onCompleteSuccess, onFailure, onSuccess, postProcess, preProcess, workflow;\n          arg = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n          preProcess = (function(_this) {\n            return function() {\n              return _this.$toPromise(function() {\n                return _this.preProcess.apply(_this, [arg].concat(slice.call(args)));\n              });\n            };\n          })(this);\n          execute = (function(_this) {\n            return function(arg) {\n              return _this.$toPromise(function() {\n                return _this.execute.apply(_this, [arg].concat(slice.call(args)));\n              });\n            };\n          })(this);\n          postProcess = (function(_this) {\n            return function(result, arg) {\n              return _this.$toPromise(function() {\n                return _this.postProcess.apply(_this, [result, arg].concat(slice.call(args)));\n              });\n            };\n          })(this);\n          onCompleteSuccess = (function(_this) {\n            return function(result, arg) {\n              return _this.$toPromise(function() {\n                return _this.onComplete.apply(_this, [result, arg].concat(slice.call(args)));\n              }).then(function() {\n                return result;\n              });\n            };\n          })(this);\n          onCompleteFailure = (function(_this) {\n            return function(error, arg) {\n              return _this.$toPromise(function() {\n                return _this.onComplete.apply(_this, [error, arg].concat(slice.call(args)));\n              }).then(function() {\n                return $q.reject(error);\n              });\n            };\n          })(this);\n          onSuccess = (function(_this) {\n            return function(result, arg) {\n              return _this.$toPromise(function() {\n                return _this.onSuccess.apply(_this, [result, arg].concat(slice.call(args)));\n              });\n            };\n          })(this);\n          onFailure = (function(_this) {\n            return function(error, arg) {\n              return _this.$toPromise(function() {\n                return _this.onFailure.apply(_this, [error, arg].concat(slice.call(args)));\n              });\n            };\n          })(this);\n          workflow = function(arg) {\n            return execute(arg).then((function(outcome) {\n              return onCompleteSuccess(outcome, arg);\n            }), function(error) {\n              return onCompleteFailure(error, arg);\n            }).then((function(result) {\n              return postProcess(result, arg);\n            })).then((function(result) {\n              return onSuccess(result, arg);\n            }))[\"catch\"](function(error) {\n              return onFailure(error, arg);\n            });\n          };\n          return preProcess().then(workflow, function(error) {\n            return onCompleteFailure(error, arg).then((function(result) {\n              return onSuccess(result, arg);\n            }), function(error) {\n              return onFailure(error, arg);\n            });\n          });\n        };\n\n        ActionCtrl.prototype.preProcess = function() {\n          var arg, args;\n          arg = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n          $log.debug.apply($log, ['preProcess', this.actionName, this.modelName, arg].concat(slice.call(args)));\n          return arg;\n        };\n\n        ActionCtrl.prototype.execute = function() {\n          var arg, args;\n          arg = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n          $log.debug.apply($log, ['execute', this.actionName, this.modelName, arg].concat(slice.call(args)));\n          return $q.reject(\"Execute acttion not implemented!\");\n        };\n\n        ActionCtrl.prototype.postProcess = function() {\n          var arg, args;\n          arg = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n          $log.debug.apply($log, ['postProcess', this.actionName, this.modelName, arg].concat(slice.call(args)));\n          return arg;\n        };\n\n        ActionCtrl.prototype.onComplete = function() {\n          var arg, args, outcome;\n          outcome = arguments[0], arg = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n          return $log.debug.apply($log, ['onComplete', this.actionName, this.modelName, outcome, arg].concat(slice.call(args)));\n        };\n\n        ActionCtrl.prototype.onSuccess = function() {\n          var arg, args, result;\n          result = arguments[0], arg = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n          $log.debug.apply($log, ['onSuccess', this.actionName, this.modelName, result, arg].concat(slice.call(args)));\n          return result;\n        };\n\n        ActionCtrl.prototype.onFailure = function() {\n          var arg, args, error;\n          error = arguments[0], arg = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n          $log.error.apply($log, ['onFailure', this.actionName, this.modelName, error, arg].concat(slice.call(args)));\n          return $q.reject(error);\n        };\n\n        ActionCtrl.prototype.onInvalid = function() {\n          var arg, args, form;\n          form = arguments[0], arg = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n          $log.debug.apply($log, ['onInvalid', this.actionName, this.modelName, form, arg].concat(slice.call(args)));\n          return $q.reject(form);\n        };\n\n        return ActionCtrl;\n\n      })();\n      return ActionCtrl;\n    }\n  ]);\n\n}).call(this);\n\n(function() {\n  var ConfigurationProvider, PARAMETERS;\n\n  PARAMETERS = {};\n\n  ConfigurationProvider = (function() {\n    function ConfigurationProvider() {}\n\n    ConfigurationProvider.prototype.$get = function() {\n      return PARAMETERS;\n    };\n\n    ConfigurationProvider.prototype.get = function(name) {\n      return PARAMETERS[name];\n    };\n\n    ConfigurationProvider.prototype.add = function(name, value) {\n      var entry;\n      entry = {};\n      entry[name] = value;\n      return angular.extend(PARAMETERS, entry);\n    };\n\n    ConfigurationProvider.prototype.put = function(name, value) {\n      var entry;\n      entry = {};\n      entry[name] = value;\n      return angular.merge(PARAMETERS, entry);\n    };\n\n    ConfigurationProvider.prototype.set = function(name, value) {\n      return this.add(name, value);\n    };\n\n    ConfigurationProvider.prototype.merge = function(name, value) {\n      return this.put(name, value);\n    };\n\n    return ConfigurationProvider;\n\n  })();\n\n  (angular.module('rbs-angular-core')).provider('Configuration', ConfigurationProvider);\n\n}).call(this);\n\n//# sourceMappingURL=rbs-angular-core.js.map\n","# `Resolves`\n\n    class Resolves\n\n## `andThen`\n\nZakładając że mamy `resolve`:\n\n```\nresolve = [\n  '$log'\n  'ResourceA'\n  ($log, ResourceA) -> ResourceA.query().$promise\n]\n```\n\ni drugi - operujący na wyniku poprzedniego:\n\n```\nmapping = [\n  '$delegate'\n  'ResourceB'\n  ($delegate, ResourceB) ->\n    ResourceB.query(id: $delegate.id).$promise\n]\n```\n\ntworzy\n\n```\nmapped = Resolves.andThen(resolve, mapping)\n```\n\nw postaci:\n\n```\n[\n  '$q'\n  '$log'\n  'ResourceA'\n  'ResourceB'\n  ($q, $log, ResourceA, ResourceB) ->\n    $q.when(ResourceA.query().$promise).then ($delegate) ->\n      ResourceB.query(id: $delegate.id).$promise\n]\n```\n\n      @andThen: (resolves, mapping, next...) ->\n        dependencyNames = ['$q']\n        fn1 = undefined\n        fn2 = undefined\n        [fn1Deps..., fn1] = resolves\n        [fn2Deps..., fn2] = mapping\n\n        delegateIndex = fn2Deps.indexOf '$delegate'\n\n        if delegateIndex >= 0\n          fn2Deps.splice delegateIndex, 1\n\n        for dep in fn1Deps\n          dependencyNames.push dep\n        for dep in fn2Deps\n          dependencyNames.push dep\n\n        dependencyNames.push ($q, dependencies...) ->\n          try\n            newFn1Deps = dependencies[0...fn1Deps.length]\n            $q.when(fn1 newFn1Deps...).then ($delegate) ->\n              newFn2Deps = dependencies[fn1Deps.length...(fn1Deps.length + fn2Deps.length)]\n              if delegateIndex >= 0\n                newFn2Deps.splice delegateIndex, 0, $delegate\n              fn2 newFn2Deps...\n          catch error\n            $q.reject error\n        dependencyNames\n        if next.length > 0\n          Resolves.andThen dependencyNames, next...\n        else dependencyNames\n\n    (angular.module 'rbs-angular-core').constant 'Resolves', Resolves\n","# `ApplicationError`\n\nBłąd aplikacji:\n\n    class ApplicationError extends Error\n\n      constructor: (@status, @code, @message) ->\n\n# `ErrorFactory`\n\nFabryka błędów aplikacji:\n\n    class ErrorFactory\n\n      @create: (status, code, message) -> new ApplicationError(status, code, message)\n\n      @throw: (status, code, message) -> throw ErrorFactory.create(status, code, message)\n\n    (angular.module 'rbs-angular-core').constant 'ErrorFactory', ErrorFactory","# Backoff\n\nUsługa umożliwia wywoływanie akcji zgodnie z algorytmem\n[exponential backoff](https://en.wikipedia.org/wiki/Exponential_backoff).\n\n    (angular.module 'rbs-angular-core').service 'Backoff', [\n      '$log'\n      '$q'\n      '$timeout'\n      ($log, $q, $timeout) ->\n\n        class Backoff\n\nParametry:\n1. `name`: `string` - nazwa procesu (użyta w logach)\n1. `minBackoff`: `number` - minimalny okres oczekiwania (ms)\n1. `maxBackoff`: `number` - maksymalny okres oczekiwania (ms)\n1. `randomFactor`: `number` - losowy współczynnik o jaki będzie powiększany czas oczekiwania [0.0, 1.0)\n1. `task`: `function` - wywoływane zadanie\n\n\n          constructor: (@name, @minBackoff, @maxBackoff, @randomFactor, @task) ->\n            $log.debug(\"Creating #{@name}:\", \"minBackoff\", @minBackoff, \"maxBackoff\", @maxBackoff, \"randomFactor\",\n             @randomFactor)\n            @$restartCount = 0\n\n          cancel: () ->\n            $log.debug(\"#{@name} cancelled.\")\n            if angular.isFunction(@$promise?.then)\n              $timeout.cancel(@$promise)\n            @$promise = undefined\n\n          execute: (args...) ->\n            $log.debug(\"#{@name} executing..\")\n            @$execute(args...).then ((result) => @$onSuccess(result, args...)), (error) => @$onFailure(error, args...)\n\n          $onSuccess: (result, args...) ->\n            $log.debug(\"#{@name} success.\")\n            @$restartCount = 0\n            result\n\n          $onFailure: (error, args...) ->\n            rnd = 1 + Math.random() * @randomFactor\n            @$currentBackoff = Math.min @maxBackoff, @minBackoff * Math.pow(2, @$restartCount) * rnd\n            @$restartCount += 1\n            $log.error(\"#{@name} failure! Retry in #{@$currentBackoff}..\")\n            @$promise = $timeout (() => @execute(args...)), @$currentBackoff, true\n            @$promise\n\n          $execute: (args...) ->\n            @lastOutcome = try\n              $q.when @task(args...)\n            catch error\n              $log.error error\n              $q.reject error\n\n        (args...) -> new Backoff(args...)\n    ]\n\n## Użycie\n\nPoniższy kod powoduje próbę połączenia się z WebSocketem. Jeżeli połączenie się nie powiedzie będą podejmowane próby\nkolejnego połączenia w rosnących odstępach czasu pomiędzy 10s a 2m.\n\n    (angular.module 'rbs-angular-core-samples').config [\n      'ConfigurationProvider'\n      (ConfigurationProvider) ->\n        ConfigurationProvider.add 'WS_URL', 'ws://example.org/events'\n        ConfigurationProvider.add 'WS_MIN_BACKOFF', 10 * 1000\n        ConfigurationProvider.add 'WS_MAX_BACKOFF', 120 * 1000\n    ]\n\n    (angular.module 'rbs-angular-core-samples').run [\n      '$log'\n      '$q'\n      '$rootScope'\n      '$websocket'\n      'Backoff'\n      'Configuration'\n      ($log, $q, $rootScope, $websocket, Backoff, Configuration) ->\n\n        onMessage = (event) ->\n          message = JSON.parse(event.data)\n          $rootScope.$broadcast 'ws-event', message\n\n        min = Configuration.WS_MIN_BACKOFF\n        max = Configuration.WS_WS_MAX_BACKOFF\n        random = 0.2\n        bo = Backoff \"Event stream WS\", min, max, random, ->\n          deferred = $q.defer()\n          ws = $websocket \"#{WS_WS_URL}/event?\"\n          ws.onMessage onMessage\n          ws.onClose (event) -> deferred.reject(event)\n          deferred.promise\n        bo.execute()\n    ]\n","# `ActionProgressSupport`\n\nMixin dodający obsługę flagi postępu do `ActionCtrl`.\n\n    (angular.module 'rbs-angular-core').service 'ActionProgressSupport', [\n      '$log'\n      '$q'\n      ($log, $q) ->\n\n        class ActionProgressSupport\n\n          startProgress: () ->\n            @progress = true\n\n          stopProgress: () ->\n            @progress = false\n\n        ActionProgressSupport\n    ]\n","# `ActionMessagesSupport`\n\nMixin dodający obsługę listy notyfikacji do `ActionCtrl`.\n\n    (angular.module 'rbs-angular-core').service 'ActionMessagesSupport', [\n      '$log'\n      '$q'\n      ($log, $q) ->\n\n        class ActionMessagesSupport\n\n          resetMessages: () ->\n            @messages = []\n\n          addMessage: (type, message) ->\n            (@messages or @resetMessages()).push\n              type: type\n              message: message\n\n          addError: (error) -> @addMessage 'danger', error\n\n          addSuccess: (success) -> @addMessage 'success', success\n\n          addInfo: (info) -> @addMessage 'info', info\n\n          addWarning: (warning) -> @addMessage 'warning', warning\n\n          removeMessage: (index) ->\n            @messages.splice index, 1\n\n        ActionMessagesSupport\n    ]\n","# `ActionCtrl`\n\nPodstawowy kontroler akcji.\n\n    (angular.module 'rbs-angular-core').service 'ActionCtrl', [\n      '$log'\n      '$q'\n      ($log, $q) ->\n\n        class ActionCtrl\n\n          constructor: (@modelName, @actionName) ->\n\n## `performValid`\n\nWywołuje akcję z walidacją formularza `form`. Jeżeli walidacja się nie powiedzie wywołana zostanie metoda `onInvalid`.\nW przeciwnym razie wywoływana jest metoda `perform`:\n\n          performValid: (form, arg, args...) ->\n            if form.$valid\n              @perform(arg, args...)\n            else\n              @onInvalid(form, arg, args...)\n\n          $toPromise: (fn) ->\n            try\n              $q.when fn()\n            catch error\n              $q.reject error\n\n## `perform`\n\nWywołuje akcję. Workflow akcji:\n1. `preProcess`\n1. `execute`\n1. `postProcess`\n1. `onComplete`\n1. `onSuccess` lub `onFailure`\n\nKażdą z metod można nadpisac. W ciele metod dozwolone jest rzucanie wyjątków, jak również zwracanie `promise`. W obydwu\nprzypadkach metoda `perform` zwróci na końcu `promise`. Wszystkie metody mają domyślne implementacje.\n\n          perform: (arg, args...) ->\n            preProcess = => @$toPromise => @preProcess arg, args...\n            execute = (arg) => @$toPromise => @execute arg, args...\n            postProcess = (result, arg) => @$toPromise => @postProcess result, arg, args...\n            onCompleteSuccess = (result, arg) =>\n              @$toPromise(=> @onComplete result, arg, args...).then () -> result\n            onCompleteFailure = (error, arg) =>\n              @$toPromise(=> @onComplete error, arg, args...).then () -> $q.reject(error)\n            onSuccess = (result, arg) => @$toPromise => @onSuccess result, arg, args...\n            onFailure = (error, arg) => @$toPromise => @onFailure error, arg, args...\n\n            workflow = (arg) ->\n              execute(arg)\n                .then(((outcome) -> onCompleteSuccess(outcome, arg)), (error) -> onCompleteFailure(error, arg))\n                .then(((result) -> postProcess(result, arg)))\n                .then(((result) -> onSuccess(result, arg)))\n                .catch (error) -> onFailure(error, arg)\n\n            preProcess().then workflow, (error) ->\n              onCompleteFailure(error, arg).then ((result) -> onSuccess(result, arg)), (error) -> onFailure(error, arg)\n\n### `preProcess` ###\n\nUmożliwia modyfikację modelu przed przekazaniem go do metody `execute`. Zwrócona wartość zostanie przekazana jako model\ndo metody `execute`. Rzucony wyjątek lub błędny `promise` zostanie przekazany od razu do metody `onFailure`\njako `error` wraz z oryginalnym modelem.\n\n          preProcess: (arg, args...) ->\n            $log.debug 'preProcess', @actionName, @modelName, arg, args...\n            arg\n\n### `execute` ###\n\nWykonuje akcję:\n\n          execute: (arg, args...) ->\n            $log.debug 'execute', @actionName, @modelName, arg, args...\n            $q.reject(\"Execute acttion not implemented!\")\n\n### `postProcess` ###\n\nUmożliwia modyfikację rezultatu metody `execute`. Zwrócona wartość zostanie przekazana jako wynik akcji.\nRzucony wyjątek lub błędny `promise` zostanie przekazany do metody `onFailure` jako `error` wraz z modelem.\n\n          postProcess: (arg, args...) ->\n            $log.debug 'postProcess', @actionName, @modelName, arg, args...\n            arg\n\n### `onComplete` ###\n\nMetoda wywoływana jest zawsze po metodzie execute niezależnie od rezultatu jej wykonania. `outcome` będzie obiektem\nbłędu lub rezultatem wykonania.\n\n          onComplete: (outcome, arg, args...) ->\n            $log.debug 'onComplete', @actionName, @modelName, outcome, arg, args...\n\n### `onSuccess` ###\n\nObsługa powodzenia akcji:\n\n          onSuccess: (result, arg, args...) ->\n            $log.debug 'onSuccess', @actionName, @modelName, result, arg, args...\n            result\n\n### `onFailure` ###\n\nObsługa niepowodzenia akcji:\n\n          onFailure: (error, arg, args...) ->\n            $log.error 'onFailure', @actionName, @modelName, error, arg, args...\n            $q.reject(error)\n\n### `onInvalid` ###\n\nObsługa niepoprawnych danych formularza:\n\n          onInvalid: (form, arg, args...) ->\n            $log.debug 'onInvalid', @actionName, @modelName, form, arg, args...\n            $q.reject(form)\n\n        ActionCtrl\n    ]\n","# ConfigurationProvider\n\nUsługa umożliwia konfigurację parametrów aplikacji i modułów.\n\n    PARAMETERS = {}\n\n    class ConfigurationProvider\n\n      $get: -> PARAMETERS\n\nPobiera parametr konfiguracyjny o podanej nazwie `name`:\n\n      get: (name) -> PARAMETERS[name]\n\nNadpisuje parametr konfiguracyjny o podanej nazwie `name` wartością `value`:\n\n      add: (name, value) ->\n        entry = {}\n        entry[name] = value\n        angular.extend PARAMETERS, entry\n\nDołącza wartość `value` do parametru konfiguracyjnego o podanej nazwie `name` (działanie rózni się od metody `add`\nw przypadku gdy wartością jest `object` - nowa wartość jest dołączona do istniejącej przy użyciu metody\n`angular`.`merge`:\n\n      put: (name, value) ->\n        entry = {}\n        entry[name] = value\n        angular.merge PARAMETERS, entry\n\nAlias metody `add`:\n\n      set: (name, value) -> @add name, value\n\nAlias metody `put`:\n\n      merge: (name, value) -> @put name, value\n\n    (angular.module 'rbs-angular-core').provider 'Configuration', ConfigurationProvider\n"],"sourceRoot":"/source/"}