{"version":3,"sources":["main.litcoffee","service/Resolves.litcoffee","service/ErrorFactory.litcoffee","service/Backoff.litcoffee","controller/ActionProgressSupport.litcoffee","controller/ActionMessagesSupport.litcoffee","controller/ActionCtrl.litcoffee","config/Configuration.litcoffee"],"names":[],"mappings":"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","file":"rbs-angular-core.js","sourcesContent":["Główny moduł:\n\n    angular.module 'rbs-angular-core', []\n\nModuł zawierający przykłady wykorzystywane w dokumentacji:\n\n    angular.module 'rbs-angular-core-samples', ['rbs-angular-core']\n","# `Resolves`\n\n    class Resolves\n\n## `andThen`\n\nZakładając że mamy `resolve`:\n\n```\nresolve = [\n  '$log'\n  'ResourceA'\n  ($log, ResourceA) -> ResourceA.query().$promise\n]\n```\n\ni drugi - operujący na wyniku poprzedniego:\n\n```\nmapping = [\n  '$delegate'\n  'ResourceB'\n  ($delegate, ResourceB) ->\n    ResourceB.query(id: $delegate.id).$promise\n]\n```\n\ntworzy\n\n```\nmapped = Resolves.andThen(resolve, mapping)\n```\n\nw postaci:\n\n```\n[\n  '$q'\n  '$log'\n  'ResourceA'\n  'ResourceB'\n  ($q, $log, ResourceA, ResourceB) ->\n    $q.when(ResourceA.query().$promise).then ($delegate) ->\n      ResourceB.query(id: $delegate.id).$promise\n]\n```\n\n      @andThen: (resolves, mapping, next...) ->\n        dependencyNames = ['$q']\n        fn1 = undefined\n        fn2 = undefined\n        [fn1Deps..., fn1] = resolves\n        [fn2Deps..., fn2] = mapping\n\n        delegateIndex = fn2Deps.indexOf '$delegate'\n\n        if delegateIndex >= 0\n          fn2Deps.splice delegateIndex, 1\n\n        for dep in fn1Deps\n          dependencyNames.push dep\n        for dep in fn2Deps\n          dependencyNames.push dep\n\n        dependencyNames.push ($q, dependencies...) ->\n          try\n            newFn1Deps = dependencies[0...fn1Deps.length]\n            $q.when(fn1 newFn1Deps...).then ($delegate) ->\n              newFn2Deps = dependencies[fn1Deps.length...(fn1Deps.length + fn2Deps.length)]\n              if delegateIndex >= 0\n                newFn2Deps.splice delegateIndex, 0, $delegate\n              fn2 newFn2Deps...\n          catch error\n            $q.reject error\n        dependencyNames\n        if next.length > 0\n          Resolves.andThen dependencyNames, next...\n        else dependencyNames\n\n    (angular.module 'rbs-angular-core').constant 'Resolves', Resolves\n","# `ApplicationError`\n\nBłąd aplikacji:\n\n    class ApplicationError extends Error\n\n      constructor: (@status, @code, @message) ->\n\n# `ErrorFactory`\n\nFabryka błędów aplikacji:\n\n    class ErrorFactory\n\n      @create: (status, code, message) -> new ApplicationError(status, code, message)\n\n      @throw: (status, code, message) -> throw ErrorFactory.create(status, code, message)\n\n    (angular.module 'rbs-angular-core').constant 'ErrorFactory', ErrorFactory","# Backoff\n\nUsługa umożliwia wywoływanie akcji zgodnie z algorytmem\n[exponential backoff](https://en.wikipedia.org/wiki/Exponential_backoff).\n\n    (angular.module 'rbs-angular-core').service 'Backoff', [\n      '$log'\n      '$q'\n      '$timeout'\n      ($log, $q, $timeout) ->\n\n        class Backoff\n\nParametry:\n1. `name`: `string` - nazwa procesu (użyta w logach)\n1. `minBackoff`: `number` - minimalny okres oczekiwania (ms)\n1. `maxBackoff`: `number` - maksymalny okres oczekiwania (ms)\n1. `randomFactor`: `number` - losowy współczynnik o jaki będzie powiększany czas oczekiwania [0.0, 1.0)\n1. `task`: `function` - wywoływane zadanie\n\n\n          constructor: (@name, @minBackoff, @maxBackoff, @randomFactor, @task) ->\n            $log.debug(\"Creating #{@name}:\", \"minBackoff\", @minBackoff, \"maxBackoff\", @maxBackoff, \"randomFactor\",\n             @randomFactor)\n            @$restartCount = 0\n\n          cancel: () ->\n            $log.debug(\"#{@name} cancelled.\")\n            if angular.isFunction(@$promise?.then)\n              $timeout.cancel(@$promise)\n            @$promise = undefined\n\n          execute: (args...) ->\n            $log.debug(\"#{@name} executing..\")\n            @$execute(args...).then ((result) => @$onSuccess(result, args...)), (error) => @$onFailure(error, args...)\n\n          $onSuccess: (result, args...) ->\n            $log.debug(\"#{@name} success.\")\n            @$restartCount = 0\n            result\n\n          $onFailure: (error, args...) ->\n            rnd = 1 + Math.random() * @randomFactor\n            @$currentBackoff = Math.min @maxBackoff, @minBackoff * Math.pow(2, @$restartCount) * rnd\n            @$restartCount += 1\n            $log.error(\"#{@name} failure! Retry in #{@$currentBackoff}..\")\n            @$promise = $timeout (() => @execute(args...)), @$currentBackoff, true\n            @$promise\n\n          $execute: (args...) ->\n            @lastOutcome = try\n              $q.when @task(args...)\n            catch error\n              $log.error error\n              $q.reject error\n\n        (args...) -> new Backoff(args...)\n    ]\n\n## Użycie\n\nPoniższy kod powoduje próbę połączenia się z WebSocketem. Jeżeli połączenie się nie powiedzie będą podejmowane próby\nkolejnego połączenia w rosnących odstępach czasu pomiędzy 10s a 2m.\n\n    (angular.module 'rbs-angular-core-samples').config [\n      'ConfigurationProvider'\n      (ConfigurationProvider) ->\n        ConfigurationProvider.add 'WS_URL', 'ws://example.org/events'\n        ConfigurationProvider.add 'WS_MIN_BACKOFF', 10 * 1000\n        ConfigurationProvider.add 'WS_MAX_BACKOFF', 120 * 1000\n    ]\n\n    (angular.module 'rbs-angular-core-samples').run [\n      '$log'\n      '$q'\n      '$rootScope'\n      '$websocket'\n      'Backoff'\n      'Configuration'\n      ($log, $q, $rootScope, $websocket, Backoff, Configuration) ->\n\n        onMessage = (event) ->\n          message = JSON.parse(event.data)\n          $rootScope.$broadcast 'ws-event', message\n\n        min = Configuration.WS_MIN_BACKOFF\n        max = Configuration.WS_WS_MAX_BACKOFF\n        random = 0.2\n        bo = Backoff \"Event stream WS\", min, max, random, ->\n          deferred = $q.defer()\n          ws = $websocket \"#{WS_WS_URL}/event?\"\n          ws.onMessage onMessage\n          ws.onClose (event) -> deferred.reject(event)\n          deferred.promise\n        bo.execute()\n    ]\n","# `ActionProgressSupport`\n\nMixin dodający obsługę flagi postępu do `ActionCtrl`.\n\n    (angular.module 'rbs-angular-core').service 'ActionProgressSupport', [\n      '$log'\n      '$q'\n      ($log, $q) ->\n\n        class ActionProgressSupport\n\n          startProgress: () ->\n            @progress = true\n\n          stopProgress: () ->\n            @progress = false\n\n        ActionProgressSupport\n    ]\n","# `ActionMessagesSupport`\n\nMixin dodający obsługę listy notyfikacji do `ActionCtrl`.\n\n    (angular.module 'rbs-angular-core').service 'ActionMessagesSupport', [\n      '$log'\n      '$q'\n      ($log, $q) ->\n\n        class ActionMessagesSupport\n\n          resetMessages: () ->\n            @messages = []\n\n          addMessage: (type, message) ->\n            (@messages or @resetMessages()).push\n              type: type\n              message: message\n\n          addError: (error) -> @addMessage 'danger', error\n\n          addSuccess: (success) -> @addMessage 'success', success\n\n          addInfo: (info) -> @addMessage 'info', info\n\n          addWarning: (warning) -> @addMessage 'warning', warning\n\n          removeMessage: (index) ->\n            @messages.splice index, 1\n\n        ActionMessagesSupport\n    ]\n","# `ActionCtrl`\n\nPodstawowy kontroler akcji.\n\n    (angular.module 'rbs-angular-core').service 'ActionCtrl', [\n      '$log'\n      '$q'\n      ($log, $q) ->\n\n        class ActionCtrl\n\n          constructor: (@modelName, @actionName) ->\n\n## `performValid`\n\nWywołuje akcję z walidacją formularza `form`. Jeżeli walidacja się nie powiedzie wywołana zostanie metoda `onInvalid`.\nW przeciwnym razie wywoływana jest metoda `perform`:\n\n          performValid: (form, arg, args...) ->\n            if form.$valid\n              @perform(arg, args...)\n            else\n              @onInvalid(form, arg, args...)\n\n          $toPromise: (fn) ->\n            try\n              $q.when fn()\n            catch error\n              $q.reject error\n\n## `perform`\n\nWywołuje akcję. Workflow akcji:\n1. `preProcess`\n1. `execute`\n1. `postProcess`\n1. `onComplete`\n1. `onSuccess` lub `onFailure`\n\nKażdą z metod można nadpisac. W ciele metod dozwolone jest rzucanie wyjątków, jak również zwracanie `promise`. W obydwu\nprzypadkach metoda `perform` zwróci na końcu `promise`. Wszystkie metody mają domyślne implementacje.\n\n          perform: (arg, args...) ->\n            preProcess = => @$toPromise => @preProcess arg, args...\n            execute = (arg) => @$toPromise => @execute arg, args...\n            postProcess = (result, arg) => @$toPromise => @postProcess result, arg, args...\n            onCompleteSuccess = (result, arg) =>\n              @$toPromise(=> @onComplete result, arg, args...).then () -> result\n            onCompleteFailure = (error, arg) =>\n              @$toPromise(=> @onComplete error, arg, args...).then () -> $q.reject(error)\n            onSuccess = (result, arg) => @$toPromise => @onSuccess result, arg, args...\n            onFailure = (error, arg) => @$toPromise => @onFailure error, arg, args...\n\n            workflow = (arg) ->\n              execute(arg)\n                .then(((outcome) -> onCompleteSuccess(outcome, arg)), (error) -> onCompleteFailure(error, arg))\n                .then(((result) -> postProcess(result, arg)))\n                .then(((result) -> onSuccess(result, arg)))\n                .catch (error) -> onFailure(error, arg)\n\n            preProcess().then workflow, (error) ->\n              onCompleteFailure(error, arg).then ((result) -> onSuccess(result, arg)), (error) -> onFailure(error, arg)\n\n### `preProcess` ###\n\nUmożliwia modyfikację modelu przed przekazaniem go do metody `execute`. Zwrócona wartość zostanie przekazana jako model\ndo metody `execute`. Rzucony wyjątek lub błędny `promise` zostanie przekazany od razu do metody `onFailure`\njako `error` wraz z oryginalnym modelem.\n\n          preProcess: (arg, args...) ->\n            $log.debug 'preProcess', @actionName, @modelName, arg, args...\n            arg\n\n### `execute` ###\n\nWykonuje akcję:\n\n          execute: (arg, args...) ->\n            $log.debug 'execute', @actionName, @modelName, arg, args...\n            $q.reject(\"Execute acttion not implemented!\")\n\n### `postProcess` ###\n\nUmożliwia modyfikację rezultatu metody `execute`. Zwrócona wartość zostanie przekazana jako wynik akcji.\nRzucony wyjątek lub błędny `promise` zostanie przekazany do metody `onFailure` jako `error` wraz z modelem.\n\n          postProcess: (arg, args...) ->\n            $log.debug 'postProcess', @actionName, @modelName, arg, args...\n            arg\n\n### `onComplete` ###\n\nMetoda wywoływana jest zawsze po metodzie execute niezależnie od rezultatu jej wykonania. `outcome` będzie obiektem\nbłędu lub rezultatem wykonania.\n\n          onComplete: (outcome, arg, args...) ->\n            $log.debug 'onComplete', @actionName, @modelName, outcome, arg, args...\n\n### `onSuccess` ###\n\nObsługa powodzenia akcji:\n\n          onSuccess: (result, arg, args...) ->\n            $log.debug 'onSuccess', @actionName, @modelName, result, arg, args...\n            result\n\n### `onFailure` ###\n\nObsługa niepowodzenia akcji:\n\n          onFailure: (error, arg, args...) ->\n            $log.error 'onFailure', @actionName, @modelName, error, arg, args...\n            $q.reject(error)\n\n### `onInvalid` ###\n\nObsługa niepoprawnych danych formularza:\n\n          onInvalid: (form, arg, args...) ->\n            $log.debug 'onInvalid', @actionName, @modelName, form, arg, args...\n            $q.reject(form)\n\n        ActionCtrl\n    ]\n","# ConfigurationProvider\n\nUsługa umożliwia konfigurację parametrów aplikacji i modułów.\n\n    PARAMETERS = {}\n\n    class ConfigurationProvider\n\n      $get: -> PARAMETERS\n\nPobiera parametr konfiguracyjny o podanej nazwie `name`:\n\n      get: (name) -> PARAMETERS[name]\n\nNadpisuje parametr konfiguracyjny o podanej nazwie `name` wartością `value`:\n\n      add: (name, value) ->\n        entry = {}\n        entry[name] = value\n        angular.extend PARAMETERS, entry\n\nDołącza wartość `value` do parametru konfiguracyjnego o podanej nazwie `name` (działanie rózni się od metody `add`\nw przypadku gdy wartością jest `object` - nowa wartość jest dołączona do istniejącej przy użyciu metody\n`angular`.`merge`:\n\n      put: (name, value) ->\n        entry = {}\n        entry[name] = value\n        angular.merge PARAMETERS, entry\n\nAlias metody `add`:\n\n      set: (name, value) -> @add name, value\n\nAlias metody `put`:\n\n      merge: (name, value) -> @put name, value\n\n    (angular.module 'rbs-angular-core').provider 'Configuration', ConfigurationProvider\n"],"sourceRoot":"/source/"}